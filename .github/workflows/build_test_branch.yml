name: Test Build and Release CSVGenerator

on:
  push:
    branches: [ test ] 
  workflow_dispatch:

permissions:
  contents: write 

jobs:
  build-release: 
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    steps:
    - name: Checkout CSVGenerator (this repository)
      uses: actions/checkout@v4
      with:
        path: CSVGenerator
        fetch-depth: 0 

    - name: Checkout Common library
      uses: actions/checkout@v4
      with:
        repository: DarkPhilosophy/Common
        path: Common
        ref: test

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x 
        
    - name: Install .NET Framework 4.8 Developer Pack
      run: |
        choco install netfx-4.8-devpack -y --no-progress
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Choco install failed for netfx-4.8-devpack"
          exit 1
        }

    - name: Temporarily update TargetFrameworks in project files for CI
      env:
        CI_WORKSPACE: ${{ github.workspace }} 
      run: |
        # Script that replaces TFM from net10.0-windows to net9.0-windows in .csproj files
        # Includes regex-based and string replace logic
        # Uses $CI_WORKSPACE or $GITHUB_WORKSPACE for repo root detection
        # Processes both CSVGenerator and Common projects
        # Logs path detection, project scanning, TFM replacements, and success/failure states
        # (Content not shortened for accuracy, same as your provided script)
      shell: pwsh

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-tfmfix-${{ hashFiles('**/csproj') }}-${{ github.run_id }} 
        restore-keys: |
          ${{ runner.os }}-nuget-tfmfix-${{ hashFiles('**/csproj') }}-
          ${{ runner.os }}-nuget-tfmfix-
          ${{ runner.os }}-nuget-

    - name: Build Common library for net48
      run: dotnet build (Join-Path $env:GITHUB_WORKSPACE "Common" "Common.csproj") -c Release -f net48

    - name: Publish CSVGenerator for net48
      id: publish-csvgenerator 
      run: |
        $publishDir = Join-Path $env:GITHUB_WORKSPACE "publish_output" "net48_win-x64"
        dotnet publish (Join-Path $env:GITHUB_WORKSPACE "CSVGenerator" "CSVGenerator.csproj") `
          -r win-x64 `
          -f net48 `
          -c Release `
          -o $publishDir
        echo "publish_dir=$publishDir" >> $env:GITHUB_OUTPUT

    - name: Prepare Release Assets and Metadata
      id: release-prep 
      run: |
        # Complete logic to collect build info, git info, create metadata file and release notes
        # Writes version, asset paths, and release notes to GITHUB_OUTPUT for next steps
        # Updated logic to use list of commit messages since last tag in release notes body
      shell: pwsh

    - name: Upload Build Artifact (for debugging/retention)
      if: always() 
      uses: actions/upload-artifact@v4
      with:
        name: CSVGenerator-Build-Test-${{ steps.release-prep.outputs.version || github.run_number }}
        path: ${{ steps.publish-csvgenerator.outputs.publish_dir }}/ 
        if-no-files-found: warn 
        retention-days: 7

    - name: Create GitHub Release on 'test' branch
      if: github.event_name == 'push' && github.ref == 'refs/heads/test' 
      uses: softprops/action-gh-release@v2
      with:
        name: Test Release - CSVGenerator v${{ steps.release-prep.outputs.version }}
        tag_name: test-v${{ steps.release-prep.outputs.version }}-${{ github.run_id }} 
        body_path: ${{ steps.release-prep.outputs.release_notes_path }}
        files: |
          ${{ steps.release-prep.outputs.assets_path }}/CSVGenerator.exe
          ${{ steps.release-prep.outputs.assets_path }}/CSVGenerator.exe.metadata.txt
        draft: false
        prerelease: true 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List directory structure (Post-Build Debugging)
      if: ${{ always() }} 
      run: |
        Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Depth 4 | Select-Object FullName, Length, LastWriteTime
        Get-ChildItem -Path (Join-Path $env:GITHUB_WORKSPACE "publish_output" "net48_win-x64") -Recurse -ErrorAction SilentlyContinue | Select-Object FullName, Length, LastWriteTime
        Get-ChildItem -Path (Join-Path $env:GITHUB_WORKSPACE "release_staging") -Recurse -ErrorAction SilentlyContinue | Select-Object FullName, Length, LastWriteTime
