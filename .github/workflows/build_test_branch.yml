    - name: Prepare Release Assets and Metadata
      id: release-prep
      run: |
        $releaseDir = Join-Path $env:GITHUB_WORKSPACE "release_staging"
        New-Item -ItemType Directory -Path $releaseDir -Force | Out-Null

        $exePath = Join-Path $env:GITHUB_WORKSPACE "publish_output" "net48_win-x64" "CSVGenerator.exe"
        Copy-Item $exePath -Destination (Join-Path $releaseDir "CSVGenerator.exe") -Force

        $versionInfo = (Get-Item $exePath).VersionInfo
        $version = $versionInfo.FileVersion
        if ([string]::IsNullOrWhiteSpace($version)) {
          Write-Error "Failed to get FileVersion from $exePath"
          exit 1
        }
        Write-Output "FileVersion: $version"

        $sha256 = Get-FileHash -Path $exePath -Algorithm SHA256 | Select-Object -ExpandProperty Hash
        Write-Output "SHA256: $sha256"

        $buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss 'UTC'"
        Write-Output "Build Date: $buildDate"

        $gitDir = "$env:GITHUB_WORKSPACE/CSVGenerator"
        Write-Output "Using Git directory: $gitDir"
        if (-not (Test-Path "$gitDir/.git")) {
          Write-Error "Git repository not found at $gitDir"
          exit 1
        }
        $commitHashFull = git -C $gitDir rev-parse HEAD
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to get full commit hash"
          exit 1
        }
        $commitHashShort = git -C $gitDir rev-parse --short=7 HEAD
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to get short commit hash"
          exit 1
        }
        Write-Output "Full commit hash: $commitHashFull"
        Write-Output "Short commit hash: $commitHashShort"
        $commitMessage = git -C $gitDir log -1 --pretty=%B
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to get commit message"
          exit 1
        }
        Write-Output "Raw commit message: '$commitMessage'"
        if ([string]::IsNullOrWhiteSpace($commitMessage)) {
          $commitMessage = "(No commit message provided)"
          Write-Output "Commit message was empty, using fallback: '$commitMessage'"
        }

        $commitMessageLines = $commitMessage -split "`n"
        $commitTitle = $commitMessageLines[0]
        $commitBody = if ($commitMessageLines.Length -gt 1) { $commitMessageLines[1..($commitMessageLines.Length-1)] | Where-Object { $_ -match '\S' } } else { @() }
        Write-Output "Commit title: '$commitTitle'"
        Write-Output "Commit body: '$($commitBody -join ', ')'"

        $metadataPath = Join-Path $releaseDir "CSVGenerator.exe.metadata.txt"
        $metadataContent = "Build Timestamp: $buildDate`n"
        $metadataContent += "Commit: $commitHashFull`n"
        $metadataContent += "SHA256: $sha256`n"
        $metadataContent += "Version: $version`n"
        $metadataContent += "Commit Message:`n$commitMessage"
        [System.IO.File]::WriteAllText($metadataPath, $metadataContent, [System.Text.Encoding]::UTF8)

        $releaseNotesPath = Join-Path $releaseDir "release_notes.md"
        $releaseNotes = "CSVGenerator v$version (Test Build)`n`n"
        $releaseNotes += "Build Date: $buildDate`n"
        $releaseNotes += "SHA256: $sha256 (CSVGenerator.exe)`n`n"
        $releaseNotes += "Changes`n`n"
        $releaseNotes += "Built from commit: [$commitHashShort](https://github.com/DarkPhilosophy/CSVGenerator/commit/$commitHashFull)`n"
        $releaseNotes += "Commit message:`n"
        $releaseNotes += "## $commitTitle`n"
        if ($commitBody) {
          $releaseNotes += ($commitBody | ForEach-Object { "- $_" }) -join "`n"
        }
        $releaseNotes += "`n"
        Write-Output "Raw release notes: `n$releaseNotes"
        [System.IO.File]::WriteAllText($releaseNotesPath, $releaseNotes, [System.Text.Encoding]::UTF8)

        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "assets_path=$releaseDir" >> $env:GITHUB_OUTPUT
        echo "release_notes_path=$releaseNotesPath" >> $env:GITHUB_OUTPUT
