name: Test Build and Release CSVGenerator

on:
  push:
    branches: [ test ] 
  workflow_dispatch:

permissions:
  contents: write 

jobs:
  build-release: 
    runs-on: windows-latest
    
    defaults:
      run:
        shell: pwsh

    steps:
    - name: Checkout CSVGenerator (this repository)
      uses: actions/checkout@v4
      with:
        path: CSVGenerator
        fetch-depth: 0 

    - name: Checkout Common library
      uses: actions/checkout@v4
      with:
        repository: DarkPhilosophy/Common
        path: Common
        ref: test

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x 
        
    - name: Install .NET Framework 4.8 Developer Pack
      run: |
        choco install netfx-4.8-devpack -y --no-progress
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Choco install failed for netfx-4.8-devpack"
          exit 1
        }

    - name: Temporarily update TargetFrameworks in project files for CI
      env:
        CI_WORKSPACE: ${{ github.workspace }} 
      run: |
        # (TFM update script - assumed to be the last working version)
        Write-Output "Script starting. Value of CI_WORKSPACE from step env: '$($env:CI_WORKSPACE)'"
        Write-Output "Script starting. Value of GITHUB_WORKSPACE from direct env access: '$($env:GITHUB_WORKSPACE)'"
        $baseWorkspacePath = $env:GITHUB_WORKSPACE
        if ([string]::IsNullOrWhiteSpace($baseWorkspacePath)) {
            $baseWorkspacePath = $env:CI_WORKSPACE
        }
        if ([string]::IsNullOrWhiteSpace($baseWorkspacePath)) {
            Write-Error "Base workspace path is empty or null. Aborting."
            exit 1
        }
        $csvGeneratorCheckoutPath = Join-Path $baseWorkspacePath "CSVGenerator" 
        $commonCheckoutPath = Join-Path $baseWorkspacePath "Common"          
        $projectRoots = @( $csvGeneratorCheckoutPath, $commonCheckoutPath )
        $tfmToReplace = 'net10.0-windows'; $tfmReplacement = 'net9.0-windows'
        $escapedTfmToReplace = [regex]::Escape($tfmToReplace)
        foreach ($rootPath in $projectRoots) {
            if (Test-Path $rootPath) {
                Get-ChildItem -Path $rootPath -Include *.csproj -Recurse | ForEach-Object {
                    $projectFile = $_.FullName; 
                    $content = Get-Content $projectFile -Raw; $originalContent = $content; $wasModified = $false
                    if ($content.Contains($tfmToReplace)) {
                        $content = $content.Replace($tfmToReplace, $tfmReplacement)
                        if ($content -ne $originalContent) { $wasModified = $true }
                    }
                    if (-not $wasModified -and $content.Contains($tfmToReplace)) { 
                        $regexPatternForTargetFrameworks = "([<TargetFrameworks>].*?;?)\s*$($escapedTfmToReplace)\s*(;?.*?<\TargetFrameworks>)"
                        if ($content -match "<TargetFrameworks>.*$($escapedTfmToReplace).*</TargetFrameworks>") {
                            $tempContent = $content -replace $regexPatternForTargetFrameworks, ('$1' + $tfmReplacement + '$3')
                            if ($tempContent -ne $content) { $content = $tempContent; $wasModified = $true;}
                        }
                        if (-not $wasModified -and $content -match "<TargetFramework>$($escapedTfmToReplace)</TargetFramework>") {
                             $regexPatternForTargetFramework = "<TargetFramework>$($escapedTfmToReplace)</TargetFramework>"
                             $replacementForTf = "<TargetFramework>$($tfmReplacement)</TargetFramework>"
                             $tempContent = $content -replace $regexPatternForTargetFramework, $replacementForTf
                             if ($tempContent -ne $content) { $content = $tempContent; $wasModified = $true;}
                        }
                    }
                    if ($wasModified) { Set-Content -Path $projectFile -Value $content -Force -Encoding UTF8; Write-Output "Updated $projectFile."}
                }
            }
        }

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-tfmfix-${{ hashFiles('**/csproj') }}-${{ github.run_id }} 
        restore-keys: |
          ${{ runner.os }}-nuget-tfmfix-${{ hashFiles('**/csproj') }}-
          ${{ runner.os }}-nuget-tfmfix-
          ${{ runner.os }}-nuget-
      
    - name: Build Common library for net48
      run: dotnet build (Join-Path $env:GITHUB_WORKSPACE "Common" "Common.csproj") -c Release -f net48

    - name: Publish CSVGenerator for net48
      id: publish-csvgenerator 
      run: |
        $publishDir = Join-Path $env:GITHUB_WORKSPACE "publish_output" "net48_win-x64"
        dotnet publish (Join-Path $env:GITHUB_WORKSPACE "CSVGenerator" "CSVGenerator.csproj") `
          -r win-x64 `
          -f net48 `
          -c Release `
          -o $publishDir
        Write-Output "CSVGenerator published to $publishDir"
        echo "publish_dir=$publishDir" >> $env:GITHUB_OUTPUT
        
    - name: Prepare Release Assets and Metadata (Minimal Parser Test)
      id: release-prep 
      run: |
        $ErrorActionPreference = "Stop"
        Write-Output "--- Starting Minimal Parser Test Script ---"

        # Test variable for hash
        $commitHashForTest = "somehash123" 
        Write-Output "DEBUG: commitHashForTest = $commitHashForTest"

        # Line that often seemed to be just before parser errors manifested for subsequent lines
        $_test_line1 = "- **Commit:** `$($commitHashForTest)`" # Keeping $() for robustness
        Write-Output "DEBUG: _test_line1 = $_test_line1"

        # The line that has been consistently failing with parser errors
        $_test_line2 = "- **Message:**" 
        Write-Output "DEBUG: _test_line2 = $_test_line2"

        Write-Output "Minimal Parser Test Script finished successfully."

        # Dummy outputs so subsequent steps don't fail immediately
        $fileVersion = "minimal-parser-test"
        $stagingDir = Join-Path $env:GITHUB_WORKSPACE "release_staging_minimal_parser"
        New-Item -ItemType Directory -Path $stagingDir -Force
        $relativeStagingDir = "release_staging_minimal_parser"
        $releaseNotesFilePath = Join-Path $stagingDir "release-notes.md"
        Set-Content -Path $releaseNotesFilePath -Value "Test content for release notes." -Force
        
        # Create dummy assets for the release action if needed
        $dummyExePath = Join-Path $stagingDir "CSVGenerator.exe"
        Set-Content -Path $dummyExePath -Value "dummy exe content" -Force
        $dummyMetadataPath = Join-Path $stagingDir "CSVGenerator.exe.metadata.txt"
        Set-Content -Path $dummyMetadataPath -Value "dummy metadata content" -Force

        echo "version=$fileVersion" >> $env:GITHUB_OUTPUT
        echo "release_notes_path=$(Join-Path $relativeStagingDir "release-notes.md")" >> $env:GITHUB_OUTPUT
        echo "assets_path=$relativeStagingDir" >> $env:GITHUB_OUTPUT

        exit 0
      shell: pwsh
      
    - name: Upload Build Artifact (for debugging/retention)
      if: always() 
      uses: actions/upload-artifact@v4
      with:
        name: CSVGenerator-Build-Test-${{ steps.release-prep.outputs.version || github.run_number }}
        path: ${{ steps.publish-csvgenerator.outputs.publish_dir }}/ # This path might not exist if publish step fails
        if-no-files-found: warn 
        retention-days: 7
        
    - name: Create GitHub Release on 'test' branch
      if: github.event_name == 'push' && github.ref == 'refs/heads/test' 
      uses: softprops/action-gh-release@v2
      with:
        name: Test Release - CSVGenerator v${{ steps.release-prep.outputs.version }}
        tag_name: test-v${{ steps.release-prep.outputs.version }}-${{ github.run_id }} 
        body_path: ${{ steps.release-prep.outputs.release_notes_path }}
        files: |
          ${{ steps.release-prep.outputs.assets_path }}/CSVGenerator.exe
          ${{ steps.release-prep.outputs.assets_path }}/CSVGenerator.exe.metadata.txt
        draft: false
        prerelease: true 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # No final debug step
